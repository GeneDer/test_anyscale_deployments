compactor:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.compactorSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.compactorSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  command: null
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  initContainers: []
  kind: StatefulSet
  livenessProbe: {}
  nodeSelector: {}
  persistence:
    annotations: {}
    claims:
    - name: data
      size: 10Gi
      storageClass: null
    enableStatefulSetAutoDeletePVC: false
    enabled: false
    size: 10Gi
    storageClass: null
    whenDeleted: Retain
    whenScaled: Retain
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  readinessProbe: {}
  replicas: 1
  resources: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    imagePullSecrets: []
    name: null
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
distributor:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.distributorSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.distributorSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  command: null
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  maxSurge: 0
  maxUnavailable: null
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
fullnameOverride: null
gateway:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.gatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.gatewaySelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  basicAuth:
    enabled: false
    existingSecret: null
    htpasswd: '{{ htpasswd (required "''gateway.basicAuth.username'' is required"
      .Values.gateway.basicAuth.username) (required "''gateway.basicAuth.password''
      is required" .Values.gateway.basicAuth.password) }}'
    password: null
    username: null
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  deploymentStrategy:
    type: RollingUpdate
  dnsConfig: {}
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.20.2-alpine
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: gateway.loki.example.com
      paths:
      - path: /
    ingressClassName: ""
    tls: []
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
  maxUnavailable: null
  nginxConfig:
    file: |
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr;
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;

      events {
        worker_connections  4096;  ## Default: 1024
      }

      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        proxy_http_version    1.1;

        default_type application/octet-stream;
        log_format   {{ .Values.gateway.nginxConfig.logFormat }}

        {{- if .Values.gateway.verboseLogging }}
        access_log   /dev/stderr  main;
        {{- else }}

        map $status $loggable {
          ~^[23]  0;
          default 1;
        }
        access_log   /dev/stderr  main  if=$loggable;
        {{- end }}

        sendfile     on;
        tcp_nopush   on;
        {{- if .Values.gateway.nginxConfig.resolver }}
        resolver {{ .Values.gateway.nginxConfig.resolver }};
        {{- else }}
        resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};
        {{- end }}

        {{- with .Values.gateway.nginxConfig.httpSnippet }}
        {{ . | nindent 2 }}
        {{- end }}

        server {
          listen             8080;

          {{- if .Values.gateway.basicAuth.enabled }}
          auth_basic           "Loki";
          auth_basic_user_file /etc/nginx/secrets/.htpasswd;
          {{- end }}

          location = / {
            return 200 'OK';
            auth_basic off;
            access_log off;
          }

          location = /api/prom/push {
            set $api_prom_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $api_prom_push_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          location = /api/prom/tail {
            set $api_prom_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $api_prom_tail_backend:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
          }

          # Ruler
          location ~ /prometheus/api/v1/alerts.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }
          location ~ /prometheus/api/v1/rules.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }
          location ~ /api/prom/rules.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }
          location ~ /api/prom/alerts.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }

          location ~ /api/prom/.* {
            set $api_prom_backend http://{{ include "loki.queryFrontendFullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $api_prom_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          location = /loki/api/v1/push {
            set $loki_api_v1_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $loki_api_v1_push_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          location = /loki/api/v1/tail {
            set $loki_api_v1_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $loki_api_v1_tail_backend:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
          }

          location ~ /loki/api/.* {
            set $loki_api_backend http://{{ include "loki.queryFrontendFullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $loki_api_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          {{- with .Values.gateway.nginxConfig.serverSnippet }}
          {{ . | nindent 4 }}
          {{- end }}
        }
      }
    httpSnippet: ""
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    resolver: ""
    serverSnippet: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsNonRoot: true
    runAsUser: 101
  priorityClassName: null
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  service:
    annotations: {}
    appProtocol: null
    clusterIP: null
    labels: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    nodePort: null
    port: 80
    type: ClusterIP
  terminationGracePeriodSeconds: 30
  tolerations: []
  verboseLogging: true
global:
  clusterDomain: cluster.local
  dnsNamespace: kube-system
  dnsService: kube-dns
  image:
    registry: null
  priorityClassName: null
hostAliases: []
imagePullSecrets: []
indexGateway:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.indexGatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.indexGatewaySelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  initContainers: []
  joinMemberlist: true
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    annotations: {}
    enableStatefulSetAutoDeletePVC: false
    enabled: false
    inMemory: false
    size: 10Gi
    storageClass: null
    whenDeleted: Retain
    whenScaled: Retain
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
ingester:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.ingesterSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.ingesterSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  command: null
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  initContainers: []
  kind: StatefulSet
  lifecycle: {}
  livenessProbe: {}
  maxSurge: 0
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    claims:
    - name: data
      size: 10Gi
      storageClass: null
    enableStatefulSetAutoDeletePVC: false
    enabled: false
    inMemory: false
    whenDeleted: Retain
    whenScaled: Retain
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  readinessProbe: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
  topologySpreadConstraints: |
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          {{- include "loki.ingesterSelectorLabels" . | nindent 6 }}
ingress:
  annotations: {}
  enabled: false
  hosts:
  - loki.example.com
  paths:
    distributor:
    - /api/prom/push
    - /loki/api/v1/push
    querier:
    - /api/prom/tail
    - /loki/api/v1/tail
    query-frontend:
    - /loki/api
    ruler:
    - /api/prom/rules
    - /loki/api/v1/rules
    - /prometheus/api/v1/rules
    - /prometheus/api/v1/alerts
loki:
  annotations: {}
  appProtocol: ""
  command: null
  config: |
    auth_enabled: false

    server:
      {{- toYaml .Values.loki.server | nindent 6 }}

    common:
      compactor_address: http://{{ include "loki.compactorFullname" . }}:3100

    distributor:
      ring:
        kvstore:
          store: memberlist

    memberlist:
      join_members:
        - {{ include "loki.fullname" . }}-memberlist

    ingester_client:
      grpc_client_config:
        grpc_compression: gzip

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 1
      chunk_idle_period: 30m
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_retain_period: 1m
      max_transfer_retries: 0
      wal:
        dir: /var/loki/wal

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m

    {{- if .Values.loki.schemaConfig}}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- end}}
    {{- if .Values.loki.storageConfig}}
    storage_config:
    {{- if .Values.indexGateway.enabled}}
    {{- $indexGatewayClient := dict "server_address" (printf "dns:///%s:9095" (include "loki.indexGatewayFullname" .)) }}
    {{- $_ := set .Values.loki.storageConfig.boltdb_shipper "index_gateway_client" $indexGatewayClient }}
    {{- end}}
    {{- toYaml .Values.loki.storageConfig | nindent 2}}
    {{- if .Values.memcachedIndexQueries.enabled }}
      index_queries_cache_config:
        memcached_client:
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexQueriesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          consistent_hash: true
    {{- end}}
    {{- end}}

    runtime_config:
      file: /var/{{ include "loki.name" . }}-runtime/runtime.yaml

    chunk_store_config:
      max_look_back_period: 0s
      {{- if .Values.memcachedChunks.enabled }}
      chunk_cache_config:
        embedded_cache:
          enabled: false
        memcached_client:
          consistent_hash: true
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedChunksFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
      {{- end }}
      {{- if .Values.memcachedIndexWrites.enabled }}
      write_dedupe_cache_config:
        memcached_client:
          consistent_hash: true
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexWritesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
      {{- end }}

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    query_range:
      align_queries_with_step: true
      max_retries: 5
      cache_results: true
      results_cache:
        cache:
          {{- if .Values.memcachedFrontend.enabled }}
          memcached_client:
            addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
            consistent_hash: true
          {{- else }}
          embedded_cache:
            enabled: true
            ttl: 24h
          {{- end }}

    frontend_worker:
      {{- if .Values.queryScheduler.enabled }}
      scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
      {{- else }}
      frontend_address: {{ include "loki.queryFrontendFullname" . }}-headless:9095
      {{- end }}

    frontend:
      log_queries_longer_than: 5s
      compress_responses: true
      {{- if .Values.queryScheduler.enabled }}
      scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
      {{- end }}
      tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100

    compactor:
      shared_store: s3

    ruler:
      storage:
        type: local
        local:
          directory: /etc/loki/rules
      ring:
        kvstore:
          store: memberlist
      rule_path: /tmp/loki/scratch
      alertmanager_url: https://alertmanager.xx
      external_url: https://alertmanager.xx
  configAsSecret: false
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  existingSecretForConfig: ""
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: grafana/loki
    tag: null
  livenessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 300
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  revisionHistoryLimit: 10
  schemaConfig:
    configs:
    - from: "2020-09-07"
      index:
        period: 24h
        prefix: loki_index_
      object_store: s3
      schema: v11
      store: boltdb-shipper
  server:
    http_listen_port: 3100
  serviceAnnotations: {}
  storageConfig:
    aws:
      s3: s3://us-west-2/gene-test-loki
    boltdb_shipper:
      active_index_directory: /var/loki/index
      cache_location: /var/loki/cache
      cache_ttl: 168h
      shared_store: filesystem
    filesystem:
      directory: /var/loki/chunks
  structuredConfig: {}
memcached:
  appProtocol: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: memcached
    tag: 1.6.21-alpine
  livenessProbe:
    initialDelaySeconds: 10
    tcpSocket:
      port: http
  podLabels: {}
  podSecurityContext:
    fsGroup: 11211
    runAsGroup: 11211
    runAsNonRoot: true
    runAsUser: 11211
  readinessProbe:
    initialDelaySeconds: 5
    tcpSocket:
      port: http
    timeoutSeconds: 1
  serviceAnnotations: {}
memcachedChunks:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedChunksSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedChunksSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  hostAliases: []
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
  volumeClaimTemplates: []
memcachedExporter:
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  enabled: false
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: prom/memcached-exporter
    tag: v0.13.0
  podLabels: {}
  resources: {}
memcachedFrontend:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  hostAliases: []
  maxUnavailable: 1
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedIndexQueries:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  hostAliases: []
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedIndexWrites:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  hostAliases: []
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
nameOverride: null
networkPolicy:
  alertmanager:
    namespaceSelector: {}
    podSelector: {}
    port: 9093
  discovery:
    namespaceSelector: {}
    podSelector: {}
    port: null
  enabled: false
  externalStorage:
    cidrs: []
    ports: []
  ingress:
    namespaceSelector: {}
    podSelector: {}
  metrics:
    cidrs: []
    namespaceSelector: {}
    podSelector: {}
prometheusRule:
  annotations: {}
  enabled: false
  groups: []
  labels: {}
  namespace: null
querier:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.querierSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.querierSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  command: null
  dnsConfig: {}
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  initContainers: []
  maxSurge: 0
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: |
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          {{- include "loki.querierSelectorLabels" . | nindent 6 }}
queryFrontend:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.queryFrontendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.queryFrontendSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  command: null
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  maxUnavailable: null
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
queryScheduler:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.querySchedulerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.querySchedulerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  maxUnavailable: 1
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 2
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
rbac:
  pspEnabled: false
  sccEnabled: false
ruler:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.rulerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.rulerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  command: null
  directories: {}
  dnsConfig: {}
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  initContainers: []
  kind: Deployment
  maxUnavailable: null
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
runtimeConfig: {}
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  imagePullSecrets: []
  labels: {}
  name: null
serviceMonitor:
  annotations: {}
  enabled: false
  interval: null
  labels: {}
  matchExpressions: []
  metricRelabelings: []
  namespace: null
  namespaceSelector: {}
  relabelings: []
  scheme: http
  scrapeTimeout: null
  targetLabels: []
  tlsConfig: null
tableManager:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.tableManagerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.tableManagerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  command: null
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []

COMPUTED VALUES:
compactor:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.compactorSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.compactorSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  initContainers: []
  kind: StatefulSet
  livenessProbe: {}
  nodeSelector: {}
  persistence:
    annotations: {}
    claims:
    - name: data
      size: 10Gi
      storageClass: null
    enableStatefulSetAutoDeletePVC: false
    enabled: false
    size: 10Gi
    whenDeleted: Retain
    whenScaled: Retain
  podAnnotations: {}
  podLabels: {}
  readinessProbe: {}
  replicas: 1
  resources: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    imagePullSecrets: []
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
distributor:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.distributorSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.distributorSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  maxSurge: 0
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
gateway:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.gatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.gatewaySelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
  basicAuth:
    enabled: false
    htpasswd: '{{ htpasswd (required "''gateway.basicAuth.username'' is required"
      .Values.gateway.basicAuth.username) (required "''gateway.basicAuth.password''
      is required" .Values.gateway.basicAuth.password) }}'
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  deploymentStrategy:
    type: RollingUpdate
  dnsConfig: {}
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.20.2-alpine
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: gateway.loki.example.com
      paths:
      - path: /
    ingressClassName: ""
    tls: []
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
  nginxConfig:
    file: |
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr;
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;

      events {
        worker_connections  4096;  ## Default: 1024
      }

      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        proxy_http_version    1.1;

        default_type application/octet-stream;
        log_format   {{ .Values.gateway.nginxConfig.logFormat }}

        {{- if .Values.gateway.verboseLogging }}
        access_log   /dev/stderr  main;
        {{- else }}

        map $status $loggable {
          ~^[23]  0;
          default 1;
        }
        access_log   /dev/stderr  main  if=$loggable;
        {{- end }}

        sendfile     on;
        tcp_nopush   on;
        {{- if .Values.gateway.nginxConfig.resolver }}
        resolver {{ .Values.gateway.nginxConfig.resolver }};
        {{- else }}
        resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};
        {{- end }}

        {{- with .Values.gateway.nginxConfig.httpSnippet }}
        {{ . | nindent 2 }}
        {{- end }}

        server {
          listen             8080;

          {{- if .Values.gateway.basicAuth.enabled }}
          auth_basic           "Loki";
          auth_basic_user_file /etc/nginx/secrets/.htpasswd;
          {{- end }}

          location = / {
            return 200 'OK';
            auth_basic off;
            access_log off;
          }

          location = /api/prom/push {
            set $api_prom_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $api_prom_push_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          location = /api/prom/tail {
            set $api_prom_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $api_prom_tail_backend:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
          }

          # Ruler
          location ~ /prometheus/api/v1/alerts.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }
          location ~ /prometheus/api/v1/rules.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }
          location ~ /api/prom/rules.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }
          location ~ /api/prom/alerts.* {
            proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }

          location ~ /api/prom/.* {
            set $api_prom_backend http://{{ include "loki.queryFrontendFullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $api_prom_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          location = /loki/api/v1/push {
            set $loki_api_v1_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $loki_api_v1_push_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          location = /loki/api/v1/tail {
            set $loki_api_v1_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $loki_api_v1_tail_backend:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
          }

          location ~ /loki/api/.* {
            set $loki_api_backend http://{{ include "loki.queryFrontendFullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass       $loki_api_backend:3100$request_uri;
            proxy_http_version 1.1;
          }

          {{- with .Values.gateway.nginxConfig.serverSnippet }}
          {{ . | nindent 4 }}
          {{- end }}
        }
      }
    httpSnippet: ""
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    resolver: ""
    serverSnippet: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsNonRoot: true
    runAsUser: 101
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  service:
    annotations: {}
    labels: {}
    loadBalancerSourceRanges: []
    port: 80
    type: ClusterIP
  terminationGracePeriodSeconds: 30
  tolerations: []
  verboseLogging: true
global:
  clusterDomain: cluster.local
  dnsNamespace: kube-system
  dnsService: kube-dns
  image: {}
hostAliases: []
imagePullSecrets: []
indexGateway:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.indexGatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.indexGatewaySelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  initContainers: []
  joinMemberlist: true
  nodeSelector: {}
  persistence:
    annotations: {}
    enableStatefulSetAutoDeletePVC: false
    enabled: false
    inMemory: false
    size: 10Gi
    whenDeleted: Retain
    whenScaled: Retain
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
ingester:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.ingesterSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.ingesterSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  initContainers: []
  kind: StatefulSet
  lifecycle: {}
  livenessProbe: {}
  maxSurge: 0
  nodeSelector: {}
  persistence:
    claims:
    - name: data
      size: 10Gi
      storageClass: null
    enableStatefulSetAutoDeletePVC: false
    enabled: false
    inMemory: false
    whenDeleted: Retain
    whenScaled: Retain
  podAnnotations: {}
  podLabels: {}
  readinessProbe: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
  topologySpreadConstraints: |
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          {{- include "loki.ingesterSelectorLabels" . | nindent 6 }}
ingress:
  annotations: {}
  enabled: false
  hosts:
  - loki.example.com
  paths:
    distributor:
    - /api/prom/push
    - /loki/api/v1/push
    querier:
    - /api/prom/tail
    - /loki/api/v1/tail
    query-frontend:
    - /loki/api
    ruler:
    - /api/prom/rules
    - /loki/api/v1/rules
    - /prometheus/api/v1/rules
    - /prometheus/api/v1/alerts
loki:
  annotations: {}
  appProtocol: ""
  config: |
    auth_enabled: false

    server:
      {{- toYaml .Values.loki.server | nindent 6 }}

    common:
      compactor_address: http://{{ include "loki.compactorFullname" . }}:3100

    distributor:
      ring:
        kvstore:
          store: memberlist

    memberlist:
      join_members:
        - {{ include "loki.fullname" . }}-memberlist

    ingester_client:
      grpc_client_config:
        grpc_compression: gzip

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 1
      chunk_idle_period: 30m
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_retain_period: 1m
      max_transfer_retries: 0
      wal:
        dir: /var/loki/wal

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m

    {{- if .Values.loki.schemaConfig}}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- end}}
    {{- if .Values.loki.storageConfig}}
    storage_config:
    {{- if .Values.indexGateway.enabled}}
    {{- $indexGatewayClient := dict "server_address" (printf "dns:///%s:9095" (include "loki.indexGatewayFullname" .)) }}
    {{- $_ := set .Values.loki.storageConfig.boltdb_shipper "index_gateway_client" $indexGatewayClient }}
    {{- end}}
    {{- toYaml .Values.loki.storageConfig | nindent 2}}
    {{- if .Values.memcachedIndexQueries.enabled }}
      index_queries_cache_config:
        memcached_client:
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexQueriesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          consistent_hash: true
    {{- end}}
    {{- end}}

    runtime_config:
      file: /var/{{ include "loki.name" . }}-runtime/runtime.yaml

    chunk_store_config:
      max_look_back_period: 0s
      {{- if .Values.memcachedChunks.enabled }}
      chunk_cache_config:
        embedded_cache:
          enabled: false
        memcached_client:
          consistent_hash: true
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedChunksFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
      {{- end }}
      {{- if .Values.memcachedIndexWrites.enabled }}
      write_dedupe_cache_config:
        memcached_client:
          consistent_hash: true
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexWritesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
      {{- end }}

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    query_range:
      align_queries_with_step: true
      max_retries: 5
      cache_results: true
      results_cache:
        cache:
          {{- if .Values.memcachedFrontend.enabled }}
          memcached_client:
            addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
            consistent_hash: true
          {{- else }}
          embedded_cache:
            enabled: true
            ttl: 24h
          {{- end }}

    frontend_worker:
      {{- if .Values.queryScheduler.enabled }}
      scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
      {{- else }}
      frontend_address: {{ include "loki.queryFrontendFullname" . }}-headless:9095
      {{- end }}

    frontend:
      log_queries_longer_than: 5s
      compress_responses: true
      {{- if .Values.queryScheduler.enabled }}
      scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
      {{- end }}
      tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100

    compactor:
      shared_store: s3

    ruler:
      storage:
        type: local
        local:
          directory: /etc/loki/rules
      ring:
        kvstore:
          store: memberlist
      rule_path: /tmp/loki/scratch
      alertmanager_url: https://alertmanager.xx
      external_url: https://alertmanager.xx
  configAsSecret: false
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  existingSecretForConfig: ""
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: grafana/loki
  livenessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 300
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  revisionHistoryLimit: 10
  schemaConfig:
    configs:
    - from: "2020-09-07"
      index:
        period: 24h
        prefix: loki_index_
      object_store: s3
      schema: v11
      store: boltdb-shipper
  server:
    http_listen_port: 3100
  serviceAnnotations: {}
  storageConfig:
    aws:
      s3: s3://us-west-2/gene-test-loki
    boltdb_shipper:
      active_index_directory: /var/loki/index
      cache_location: /var/loki/cache
      cache_ttl: 168h
      shared_store: filesystem
    filesystem:
      directory: /var/loki/chunks
  structuredConfig: {}
memcached:
  appProtocol: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: memcached
    tag: 1.6.21-alpine
  livenessProbe:
    initialDelaySeconds: 10
    tcpSocket:
      port: http
  podLabels: {}
  podSecurityContext:
    fsGroup: 11211
    runAsGroup: 11211
    runAsNonRoot: true
    runAsUser: 11211
  readinessProbe:
    initialDelaySeconds: 5
    tcpSocket:
      port: http
    timeoutSeconds: 1
  serviceAnnotations: {}
memcachedChunks:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedChunksSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedChunksSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  hostAliases: []
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
  volumeClaimTemplates: []
memcachedExporter:
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  enabled: false
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: prom/memcached-exporter
    tag: v0.13.0
  podLabels: {}
  resources: {}
memcachedFrontend:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  hostAliases: []
  maxUnavailable: 1
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedIndexQueries:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  hostAliases: []
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedIndexWrites:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs:
  - -I 32m
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  hostAliases: []
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
networkPolicy:
  alertmanager:
    namespaceSelector: {}
    podSelector: {}
    port: 9093
  discovery:
    namespaceSelector: {}
    podSelector: {}
  enabled: false
  externalStorage:
    cidrs: []
    ports: []
  ingress:
    namespaceSelector: {}
    podSelector: {}
  metrics:
    cidrs: []
    namespaceSelector: {}
    podSelector: {}
prometheusRule:
  annotations: {}
  enabled: false
  groups: []
  labels: {}
querier:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.querierSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.querierSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
  dnsConfig: {}
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  initContainers: []
  maxSurge: 0
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: false
    size: 10Gi
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: |
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          {{- include "loki.querierSelectorLabels" . | nindent 6 }}
queryFrontend:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.queryFrontendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.queryFrontendSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  autoscaling:
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
    customMetrics: []
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
queryScheduler:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.querySchedulerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.querySchedulerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  maxUnavailable: 1
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  replicas: 2
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
rbac:
  pspEnabled: false
  sccEnabled: false
ruler:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.rulerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.rulerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  appProtocol:
    grpc: ""
  directories: {}
  dnsConfig: {}
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  initContainers: []
  kind: Deployment
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: false
    size: 10Gi
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
runtimeConfig: {}
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  imagePullSecrets: []
  labels: {}
serviceMonitor:
  annotations: {}
  enabled: false
  labels: {}
  matchExpressions: []
  metricRelabelings: []
  namespaceSelector: {}
  relabelings: []
  scheme: http
  targetLabels: []
tableManager:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.tableManagerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.tableManagerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image: {}
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []

HOOKS:
MANIFEST:
---
# Source: loki-distributed/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-loki-distributed
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: loki-distributed/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-loki-distributed
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    auth_enabled: false
    chunk_store_config:
      max_look_back_period: 0s
    common:
      compactor_address: http://loki-loki-distributed-compactor:3100
    compactor:
      shared_store: s3
    distributor:
      ring:
        kvstore:
          store: memberlist
    frontend:
      compress_responses: true
      log_queries_longer_than: 5s
      tail_proxy_url: http://loki-loki-distributed-querier:3100
    frontend_worker:
      frontend_address: loki-loki-distributed-query-frontend-headless:9095
    ingester:
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_idle_period: 30m
      chunk_retain_period: 1m
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 1
      max_transfer_retries: 0
      wal:
        dir: /var/loki/wal
    ingester_client:
      grpc_client_config:
        grpc_compression: gzip
    limits_config:
      enforce_metric_name: false
      max_cache_freshness_per_query: 10m
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      split_queries_by_interval: 15m
    memberlist:
      join_members:
      - loki-loki-distributed-memberlist
    query_range:
      align_queries_with_step: true
      cache_results: true
      max_retries: 5
      results_cache:
        cache:
          embedded_cache:
            enabled: true
            ttl: 24h
    ruler:
      alertmanager_url: https://alertmanager.xx
      external_url: https://alertmanager.xx
      ring:
        kvstore:
          store: memberlist
      rule_path: /tmp/loki/scratch
      storage:
        local:
          directory: /etc/loki/rules
        type: local
    runtime_config:
      file: /var/loki-distributed-runtime/runtime.yaml
    schema_config:
      configs:
      - from: "2020-09-07"
        index:
          period: 24h
          prefix: loki_index_
        object_store: s3
        schema: v11
        store: boltdb-shipper
    server:
      http_listen_port: 3100
    storage_config:
      aws:
        s3: s3://us-west-2/gene-test-loki
      boltdb_shipper:
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        cache_ttl: 168h
        shared_store: filesystem
      filesystem:
        directory: /var/loki/chunks
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
---
# Source: loki-distributed/templates/gateway/configmap-gateway.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-loki-distributed-gateway
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
data:
  nginx.conf: |
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;
    
    events {
      worker_connections  4096;  ## Default: 1024
    }
    
    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;
    
      proxy_http_version    1.1;
    
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
    
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local;
    
      server {
        listen             8080;
    
        location = / {
          return 200 'OK';
          auth_basic off;
          access_log off;
        }
    
        location = /api/prom/push {
          set $api_prom_push_backend http://loki-loki-distributed-distributor.grafana-loki.svc.cluster.local;
          proxy_pass       $api_prom_push_backend:3100$request_uri;
          proxy_http_version 1.1;
        }
    
        location = /api/prom/tail {
          set $api_prom_tail_backend http://loki-loki-distributed-querier.grafana-loki.svc.cluster.local;
          proxy_pass       $api_prom_tail_backend:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_http_version 1.1;
        }
    
        # Ruler
        location ~ /prometheus/api/v1/alerts.* {
          proxy_pass       http://loki-loki-distributed-ruler.grafana-loki.svc.cluster.local:3100$request_uri;
        }
        location ~ /prometheus/api/v1/rules.* {
          proxy_pass       http://loki-loki-distributed-ruler.grafana-loki.svc.cluster.local:3100$request_uri;
        }
        location ~ /api/prom/rules.* {
          proxy_pass       http://loki-loki-distributed-ruler.grafana-loki.svc.cluster.local:3100$request_uri;
        }
        location ~ /api/prom/alerts.* {
          proxy_pass       http://loki-loki-distributed-ruler.grafana-loki.svc.cluster.local:3100$request_uri;
        }
    
        location ~ /api/prom/.* {
          set $api_prom_backend http://loki-loki-distributed-query-frontend-headless.grafana-loki.svc.cluster.local;
          proxy_pass       $api_prom_backend:3100$request_uri;
          proxy_http_version 1.1;
        }
    
        location = /loki/api/v1/push {
          set $loki_api_v1_push_backend http://loki-loki-distributed-distributor.grafana-loki.svc.cluster.local;
          proxy_pass       $loki_api_v1_push_backend:3100$request_uri;
          proxy_http_version 1.1;
        }
    
        location = /loki/api/v1/tail {
          set $loki_api_v1_tail_backend http://loki-loki-distributed-querier.grafana-loki.svc.cluster.local;
          proxy_pass       $loki_api_v1_tail_backend:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_http_version 1.1;
        }
    
        location ~ /loki/api/.* {
          set $loki_api_backend http://loki-loki-distributed-query-frontend-headless.grafana-loki.svc.cluster.local;
          proxy_pass       $loki_api_backend:3100$request_uri;
          proxy_http_version 1.1;
        }
      }
    }
---
# Source: loki-distributed/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-loki-distributed-runtime
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
data:
  runtime.yaml: |
    
    {}
---
# Source: loki-distributed/templates/compactor/service-compactor.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-compactor
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: compactor
---
# Source: loki-distributed/templates/distributor/service-distributor.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-distributor
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: distributor
---
# Source: loki-distributed/templates/gateway/service-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-gateway
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: gateway
---
# Source: loki-distributed/templates/ingester/service-ingester-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-ingester-headless
  namespace: grafana-loki
  labels:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: ingester
    prometheus.io/service-monitor: "false"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: ingester
---
# Source: loki-distributed/templates/ingester/service-ingester.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-ingester
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: ingester
---
# Source: loki-distributed/templates/querier/service-querier-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-querier-headless
  namespace: grafana-loki
  labels:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: querier
    prometheus.io/service-monitor: "false"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: querier
---
# Source: loki-distributed/templates/querier/service-querier.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-querier
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: querier
---
# Source: loki-distributed/templates/query-frontend/service-query-frontend-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-query-frontend-headless
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
    prometheus.io/service-monitor: "false"
spec:
  clusterIP: None
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: query-frontend
---
# Source: loki-distributed/templates/query-frontend/service-query-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-query-frontend
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 3100
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: query-frontend
---
# Source: loki-distributed/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-loki-distributed-memberlist
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/part-of: memberlist
---
# Source: loki-distributed/templates/distributor/deployment-distributor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-loki-distributed-distributor
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-distributed
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: distributor
  template:
    metadata:
      annotations:
        checksum/config: c251ddeddeec1f7c32f9bde9935fec29ba104e3c62ead57f615e6a0203f46ee8
      labels:
        app.kubernetes.io/name: loki-distributed
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: loki-loki-distributed

      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: distributor
          image: docker.io/grafana/loki:2.9.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=distributor
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 300
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /var/loki-distributed-runtime
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki-distributed
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: distributor
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-distributed
                    app.kubernetes.io/instance: loki
                    app.kubernetes.io/component: distributor
                topologyKey: failure-domain.beta.kubernetes.io/zone

      volumes:
        - name: config
          configMap:
            name: loki-loki-distributed
        - name: runtime-config
          configMap:
            name: loki-loki-distributed-runtime
---
# Source: loki-distributed/templates/gateway/deployment-gateway.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-loki-distributed-gateway
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-distributed
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: gateway
  template:
    metadata:
      annotations:
        checksum/config: f39a97b96fb48eb676f43740f99f6524e130d2343e0ea3c6cf0a4e78c4d369a7
      labels:
        app.kubernetes.io/name: loki-distributed
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: gateway
    spec:
      serviceAccountName: loki-loki-distributed

      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationGracePeriodSeconds: 30
      containers:
        - name: nginx
          image: docker.io/nginxinc/nginx-unprivileged:1.20.2-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
            - name: tmp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki-distributed
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: gateway
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-distributed
                    app.kubernetes.io/instance: loki
                    app.kubernetes.io/component: gateway
                topologyKey: failure-domain.beta.kubernetes.io/zone

      volumes:
        - name: config
          configMap:
            name: loki-loki-distributed-gateway
        - name: tmp
          emptyDir: {}
        - name: docker-entrypoint-d-override
          emptyDir: {}
---
# Source: loki-distributed/templates/query-frontend/deployment-query-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-loki-distributed-query-frontend
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-distributed
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: query-frontend
  template:
    metadata:
      annotations:
        checksum/config: c251ddeddeec1f7c32f9bde9935fec29ba104e3c62ead57f615e6a0203f46ee8
      labels:
        app.kubernetes.io/name: loki-distributed
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: query-frontend
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: loki-loki-distributed

      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: query-frontend
          image: docker.io/grafana/loki:2.9.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=query-frontend
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 300
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /var/loki-distributed-runtime
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki-distributed
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: query-frontend
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-distributed
                    app.kubernetes.io/instance: loki
                    app.kubernetes.io/component: query-frontend
                topologyKey: failure-domain.beta.kubernetes.io/zone

      volumes:
        - name: config
          configMap:
            name: loki-loki-distributed
        - name: runtime-config
          configMap:
            name: loki-loki-distributed-runtime
---
# Source: loki-distributed/templates/compactor/statefulset-compactor.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-loki-distributed-compactor
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-loki-distributed-compactor-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-distributed
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: compactor
  template:
    metadata:
      annotations:
        checksum/config: c251ddeddeec1f7c32f9bde9935fec29ba104e3c62ead57f615e6a0203f46ee8
      labels:
        app.kubernetes.io/name: loki-distributed
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: loki-loki-distributed

      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: compactor
          image: docker.io/grafana/loki:2.9.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=compactor
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true

          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1

          livenessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 300
          volumeMounts:
            - name: temp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /var/loki-distributed-runtime
            - name: data
              mountPath: /var/loki
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki-distributed
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: compactor
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-distributed
                    app.kubernetes.io/instance: loki
                    app.kubernetes.io/component: compactor
                topologyKey: failure-domain.beta.kubernetes.io/zone

      volumes:
        - name: temp
          emptyDir: {}
        - name: config
          configMap:
            name: loki-loki-distributed
        - name: runtime-config
          configMap:
            name: loki-loki-distributed-runtime
        - name: data
          emptyDir: {}
---
# Source: loki-distributed/templates/ingester/statefulset-ingester.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-loki-distributed-ingester
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-loki-distributed-ingester-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-distributed
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: ingester
  template:
    metadata:
      annotations:
        checksum/config: c251ddeddeec1f7c32f9bde9935fec29ba104e3c62ead57f615e6a0203f46ee8
      labels:
        app.kubernetes.io/name: loki-distributed
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: loki-distributed
              app.kubernetes.io/instance: loki
              app.kubernetes.io/component: ingester

      serviceAccountName: loki-loki-distributed

      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: ingester
          image: docker.io/grafana/loki:2.9.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=ingester
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true

          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1

          livenessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 300
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /var/loki-distributed-runtime
            - name: data
              mountPath: /var/loki
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki-distributed
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: ingester
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-distributed
                    app.kubernetes.io/instance: loki
                    app.kubernetes.io/component: ingester
                topologyKey: failure-domain.beta.kubernetes.io/zone

      volumes:
        - name: config
          configMap:
            name: loki-loki-distributed
        - name: runtime-config
          configMap:
            name: loki-loki-distributed-runtime
        - name: data
          emptyDir: {}
---
# Source: loki-distributed/templates/querier/statefulset-querier.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-loki-distributed-querier
  namespace: grafana-loki
  labels:
    helm.sh/chart: loki-distributed-0.78.0
    app.kubernetes.io/name: loki-distributed
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-loki-distributed-querier-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-distributed
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: querier
  template:
    metadata:
      annotations:
        checksum/config: c251ddeddeec1f7c32f9bde9935fec29ba104e3c62ead57f615e6a0203f46ee8
      labels:
        app.kubernetes.io/name: loki-distributed
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: querier
        app.kubernetes.io/part-of: memberlist
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: loki-distributed
              app.kubernetes.io/instance: loki
              app.kubernetes.io/component: querier

      serviceAccountName: loki-loki-distributed

      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: querier
          image: docker.io/grafana/loki:2.9.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=querier
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 300
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /var/loki-distributed-runtime
            - name: data
              mountPath: /var/loki
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki-distributed
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: querier
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-distributed
                    app.kubernetes.io/instance: loki
                    app.kubernetes.io/component: querier
                topologyKey: failure-domain.beta.kubernetes.io/zone

      volumes:
        - name: config
          configMap:
            name: loki-loki-distributed
        - name: runtime-config
          configMap:
            name: loki-loki-distributed-runtime
        - name: data
          emptyDir: {}

NOTES:
***********************************************************************
 Welcome to Grafana Loki
 Chart version: 0.78.0
 Loki version: 2.9.2
***********************************************************************

Installed components:
* gateway
* ingester
* distributor
* querier
* query-frontend
* compactor
